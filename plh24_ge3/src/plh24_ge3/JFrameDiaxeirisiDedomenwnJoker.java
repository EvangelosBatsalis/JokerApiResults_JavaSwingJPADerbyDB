/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package plh24_ge3;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.DatePickerSettings;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import java.sql.*;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Objects;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;

/**
 *
 * @author Evangelos
 */
public class JFrameDiaxeirisiDedomenwnJoker extends javax.swing.JFrame {

    EntityManagerFactory emf = Persistence.createEntityManagerFactory("plh24_ge3PU");
    EntityManager em = emf.createEntityManager();
    GameJpaController gjc = new GameJpaController(emf);

    double[] distributed = new double[8];
    double[] jackpot = new double[8];

    /**
     * Creates new form NewJFrame
     */
    public JFrameDiaxeirisiDedomenwnJoker() {
        initComponents();
        DatePickerSettings dateSettings = new DatePickerSettings();
        dateSettings.setFormatForDatesCommonEra("dd/MM/yyyy");
        datePickerFrom.setDateToToday();
        datePickerFrom.setSettings(dateSettings);

        DatePickerSettings dateSettings2 = new DatePickerSettings();
        dateSettings2.setFormatForDatesCommonEra("dd/MM/yyyy");
        datePickerTo.setDateToToday();
        datePickerTo.setSettings(dateSettings2);

        lblDrawDate.setText("");
        lblDrawId.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calendarPanel1 = new com.github.lgooddatepicker.components.CalendarPanel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButtonDataDeletionRangeDate = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        datePickerFrom = new com.github.lgooddatepicker.components.DatePicker();
        datePickerTo = new com.github.lgooddatepicker.components.DatePicker();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextGameId = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        lblDrawDate = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblDrawId = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButtonDataDeletionButtonID = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Διαχείριση δεδομένων");
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 28)); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Αριθμός 1", "Αριθμός 2", "Αριθμός 3", "Αριθμός 4", "Αριθμός 5", "Τζόκερ"
            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jLabel6.setText("Νικήτρια στήλη");
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Κατηγορίες Επιτυχιών", "Επιτυχίες", "Κέρδη ανά επιτυχία"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        jButtonDataDeletionRangeDate.setText("Διαγραφή δεδομένων παιχνιδιών εντός εύρους ημερομηνιών");
        jButtonDataDeletionRangeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDataDeletionRangeDateActionPerformed(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel1.setPreferredSize(new java.awt.Dimension(496, 176));

        jLabel2.setText("Αναζήτηση μεταξύ ημερομηνιών");
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N

        jLabel10.setText("Από:");

        jLabel5.setText("Εώς:");

        jButton5.setText("Αναζήτηση");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 39, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(25, 25, 25))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(datePickerTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(datePickerFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(datePickerFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(datePickerTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel2.setPreferredSize(new java.awt.Dimension(496, 176));

        jLabel12.setText("Αναζήτηση Κλήρωσης");
        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N

        jLabel3.setText("Αριθμός Κλήρωσης:");

        jButton1.setText("Αναζήτηση");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jLabel12))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextGameId, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextGameId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        lblDrawDate.setText("jLabel10");
        lblDrawDate.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N

        jLabel4.setText("Κλήρωση:");
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N

        lblDrawId.setText("jLabel7");
        lblDrawId.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N

        jLabel7.setText("Ημερομηνία:");
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N

        jButton2.setText("Αποθήκευση στην Βάση Δεδομένων");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButtonDataDeletionButtonID.setText("Διαγραφή δεδομένων παιχνιδιού");
        jButtonDataDeletionButtonID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDataDeletionButtonIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 867, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(266, 266, 266))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDrawDate)
                        .addGap(55, 55, 55)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblDrawId)
                        .addGap(169, 169, 169))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonDataDeletionRangeDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonDataDeletionButtonID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(0, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDrawDate)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4)
                    .addComponent(lblDrawId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButtonDataDeletionButtonID)
                .addGap(19, 19, 19)
                .addComponent(jButtonDataDeletionRangeDate)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (!jTextGameId.getText().isEmpty()) {
            getData(jTextGameId.getText());
        } else {
            JOptionPane.showMessageDialog(null, "Εισάγετε αριθμό κλήρωσης στο πεδίο", this.getTitle(), JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        if (lblDrawId.getText().isEmpty() || lblDrawDate.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Δεν υπάρχουν δεδομένα για αποθήκευση!", this.getTitle(), JOptionPane.ERROR_MESSAGE);
            return;
        }

        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        Date parsed = null;
        try {
            parsed = format.parse(lblDrawDate.getText());
        } catch (ParseException ex) {
            Logger.getLogger(JFrameDiaxeirisiDedomenwnJoker.class.getName()).log(Level.SEVERE, null, ex);
        }
        java.sql.Date sqlDrawDate = new java.sql.Date(parsed.getTime());

        final String connString = "jdbc:derby:";
        final String dbPath = "//localhost:1527/JOKER";
        final String user = "JOKER";
        final String pass = "JOKER";

        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        int nCol = dtm.getColumnCount();
        int winningNumbers[] = new int[nCol];
        for (int i = 0; i < nCol; i++) {
            winningNumbers[i] = Integer.parseInt(dtm.getValueAt(0, i).toString());
        }

        DefaultTableModel dtm2 = (DefaultTableModel) jTable2.getModel();
        int nRow = dtm2.getRowCount();
        nCol = dtm2.getColumnCount();
        String[][] prizeCategories = new String[nRow][nCol - 1]; //-1 στις στήλες γιατί δεν θέλουμε την 1η στήλη που περιέχει τα ονόματα των κατηγοριών
        for (int i = 0; i < nRow; i++) {
            for (int j = 0; j < nCol - 1; j++) {
                prizeCategories[i][j] = dtm2.getValueAt(i, j + 1).toString();//+1 για τον ίδιο λόγο με παραπάνω
            }
        }

        int drawId = Integer.parseInt(lblDrawId.getText());
        String SELECT_QUERY = "SELECT DRAWID FROM JOKER.GAME WHERE DRAWID = " + drawId;

        boolean success = false;
        try {
            Connection con = DriverManager.getConnection(connString + dbPath, user, pass); // Συνδεση με τη Βάση δεδομένων
            Statement stmt = con.createStatement();

            ResultSet result = stmt.executeQuery(SELECT_QUERY);

            if (result.next()) {
                success = true;
                JOptionPane.showMessageDialog(null, "Η κλήρωση " + drawId + " είναι ήδη αποθηκευμένη στην βάση δεδομένων", this.getTitle(), JOptionPane.WARNING_MESSAGE);
            } else {

                PreparedStatement psG = con.prepareStatement("INSERT INTO JOKER.GAME VALUES(?,?,?,?,?,?,?,?)");
                psG.setInt(1, drawId);
                psG.setInt(2, winningNumbers[0]);
                psG.setInt(3, winningNumbers[1]);
                psG.setInt(4, winningNumbers[2]);
                psG.setInt(5, winningNumbers[3]);
                psG.setInt(6, winningNumbers[4]);
                psG.setInt(7, winningNumbers[5]);
                psG.setDate(8, sqlDrawDate);
                psG.executeUpdate();

                for (int i = 0; i < 8; i++) {
                    PreparedStatement psP = con.prepareStatement("INSERT INTO JOKER.PRIZECATEGORIES (DRAWID,PRIZEID,DIVEDENT,WINNERS,DIST,JACKPOT) VALUES (?,?,?,?,?,?)");

                    psP.setInt(1, drawId);
                    psP.setInt(2, i + 1);

                    NumberFormat nFormat = NumberFormat.getInstance(Locale.getDefault());
                    Number number = nFormat.parse(prizeCategories[i][1]);
                    double d = number.doubleValue();
                    psP.setDouble(3, d);

                    number = nFormat.parse(prizeCategories[i][0]);
                    int integer = number.intValue();
                    psP.setInt(4, integer);

                    psP.setDouble(5, distributed[i]);
                    psP.setDouble(6, jackpot[i]);
                    psP.executeUpdate();
                }

            }
        } catch (SQLException e) {
            success = true;
            System.out.println(e);
            JOptionPane.showMessageDialog(null, e + "\nΤα δεδομένα δεν αποθηκέυτηκαν", this.getTitle(), JOptionPane.ERROR_MESSAGE);
        } catch (ParseException ex) {
            success = true;
            System.out.println(ex);
            JOptionPane.showMessageDialog(null, ex + "\nΤα δεδομένα δεν αποθηκέυτηκαν", this.getTitle(), JOptionPane.ERROR_MESSAGE);
        }

        if (!success) {
            JOptionPane.showMessageDialog(null, "Τα δεδομένα αποθηκεύτηκαν με επιτυχία", this.getTitle(), JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonDataDeletionButtonIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDataDeletionButtonIDActionPerformed
        // TODO add your handling code here:
        JFrame frame = new JFrame("Διαγραφή Δεδομένων Παιχνιδιού");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        JPanel panel = new JPanel();
        panel.setLayout(null);

        // Δημιουργία Combobox
        JComboBox c1 = new JComboBox();
        Dimension size1 = c1.getPreferredSize();

        c1.setBounds(170, 20, 60, size1.height);
        //Προσθήκη στο panel του frame
        panel.add(c1);

        //Επιλογή των drawId's που υπάρχουν στην βάση δεδομένων
        //ωστε να επιλέξει ο χρήστης ποία κλήρωση θέλει να διαγράψει
        List<Integer> drawIds = new ArrayList<>();
        try {
            em.getTransaction().begin();
            Query query = em.createNamedQuery("Game.findAll");

            List<Game> games = new ArrayList<>();
            games = query.getResultList();
            em.getTransaction().commit();

            for (Game game : games) {
                int drawId = game.getDrawid();
                drawIds.add(drawId);
            }

            drawIds.forEach((drawId) -> {
                c1.addItem(String.valueOf(drawId));
            });
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Δημιουργία Button
        JButton button = new JButton("Διαγραφή δεδομένων παιχνιδιού");
        Dimension size2 = button.getPreferredSize();
        button.setBounds(160, 80, size2.width, size2.height);
        //ActionListener για το Button
        button.addActionListener((ActionEvent e) -> {
            int drawId = Integer.parseInt(c1.getSelectedItem().toString());
            //Ερώτηση στον χρήστη πριν την διαγραφή
            if (JOptionPane.showConfirmDialog(null, "Θέλετε να διαγράψετε την κλήρωση " + drawId + ";", "Διαγραφή Δεδομένων", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
                return;
            }
            try {
                em.getTransaction().begin();
                //Πρώτα διαγραφή των δεδομένων της κλήρωσης από τον πίνακα PRIZECATEGORIES
                Game gameDrawId = gjc.findGame(drawId);
                Query query2 = em.createQuery("DELETE FROM Prizecategories WHERE drawid = :drawid");
                query2.setParameter("drawid", gameDrawId).executeUpdate();

                //Και μετά διαγραφή της κλήρωσης από τον πίνακα GAME                
                Query query3 = em.createQuery("DELETE FROM Game WHERE gameid = :drawid");
                query3.setParameter("drawid", drawId).executeUpdate();
                em.getTransaction().commit();
                JOptionPane.showMessageDialog(this, "Διαγράφηκε η κλήρωση με αριθμο: " + drawId);
                c1.removeItem(String.valueOf(drawId));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
                System.out.println(ex);
            }
        });
        //Προσθήκη στο panel του frame
        panel.add(button);

        frame.getContentPane().add(panel, BorderLayout.CENTER);
        frame.setSize(400, 200);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_jButtonDataDeletionButtonIDActionPerformed

    private void jButtonDataDeletionRangeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDataDeletionRangeDateActionPerformed
        // TODO add your handling code here:
        JFrame frame = new JFrame("Διαγραφή δεδομένων παιχνιδιών εντός εύρους ημερομηνιών");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        JPanel panel = new JPanel();
        panel.setLayout(null);

        //Δημιουργία Label
        JLabel lblFrom = new JLabel();
        lblFrom.setText("Από:");
        Dimension size = datePickerFrom.getPreferredSize();
        lblFrom.setBounds(1, 10, size.width, size.height);
        panel.add(lblFrom);

        // Δημιουργία DatePicker from
        DatePicker datePickerFrom = new DatePicker();
        DatePickerSettings dateSettings = new DatePickerSettings();
        Dimension size1 = datePickerFrom.getPreferredSize();
        datePickerFrom.setBounds(30, 10, size1.width, size1.height);
        dateSettings.setFormatForDatesCommonEra("dd/MM/yyyy");
        datePickerFrom.setDateToToday();
        datePickerFrom.setSettings(dateSettings);
        //Προσθήκη στο panel του frame
        panel.add(datePickerFrom);

        //Δημιουργία Label
        JLabel lblTo = new JLabel();
        lblTo.setText("Έως:");
        Dimension size0 = datePickerFrom.getPreferredSize();
        lblTo.setBounds(200, 10, size0.width, size0.height);
        panel.add(lblTo);

        // Δημιουργία DatePicker to
        DatePicker datePickerTo = new DatePicker();
        DatePickerSettings dateSettings2 = new DatePickerSettings();
        Dimension size2 = datePickerTo.getPreferredSize();
        datePickerTo.setBounds(232, 10, size2.width, size2.height);
        dateSettings2.setFormatForDatesCommonEra("dd/MM/yyyy");
        datePickerTo.setDateToToday();
        datePickerTo.setSettings(dateSettings2);
        //Προσθήκη στο panel του frame
        panel.add(datePickerTo);

        // Δημιουργία Button
        JButton button = new JButton("Διαγραφή δεδομένων παιχνιδιών εντός εύρους ημερομηνιών");
        Dimension size3 = button.getPreferredSize();
        button.setBounds(15, 80, size3.width, size3.height);
        //ActionListener για το Button
        button.addActionListener((ActionEvent e) -> {
            if (JOptionPane.showConfirmDialog(null, "Θέλετε να διαγράψετε τις κληρώσεις από " + datePickerFrom.getDateStringOrEmptyString()
                    + " μέχρι " + datePickerTo.getDateStringOrEmptyString() + ";", "Διαγραφή Δεδομένων", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
                return;
            }

            try {
                //Παίρνω το εύρος των ημερομηνιών από τα controls datePicker
                DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date dateFrom = format.parse(datePickerFrom.getDateStringOrEmptyString());
                java.util.Date dateTo = format.parse(datePickerTo.getDateStringOrEmptyString());

                //Βρίσκω τα drawIds των κληρώσεων, μεταξύ των ημερομηνιών που έδωσε ο χρήστης,
                //και τα αποθηκεύω στην λίστα αντικειμένων games
                em.getTransaction().begin();
                Query query = em.createNamedQuery("Game.findBetweenDrawdate");
                query.setParameter("drawdateFrom", dateFrom);
                query.setParameter("drawdateTo", dateTo);
                //λίστα αντικειμένων games
                List<Game> games = new ArrayList<>();
                games = query.getResultList();
                em.getTransaction().commit();

                //Για κάθε drawId που βρέθηκε διάγραφω την αντίστοιχα αποτελέσματα από τον πίνακα PRIZECATEGORIES
                //και μετα την κλήρωση από τον πίνακα GAME
                for (Game game : games) {
                    em.getTransaction().begin();
                    Game gameDrawId = gjc.findGame(game.getDrawid());

                    //Διαγραφή από τον πίνακα PRIZECATEGORIES πρώτα
                    Query query1 = em.createQuery("DELETE FROM Prizecategories WHERE drawid = :drawid");
                    query1.setParameter("drawid", gameDrawId).executeUpdate();

                    //Και μετά διαγραφή από τον πίνακα GAME
                    Query query2 = em.createQuery("DELETE FROM Game WHERE drawid = :drawid");
                    query2.setParameter("drawid", game.getDrawid()).executeUpdate();
                    em.getTransaction().commit();
                }

                //Εμφάνισης μηνύματος επιτυχίας διαγραφής στον χρήστη
                JOptionPane.showMessageDialog(this, "Διαγράφηκαν οι κληρώσεις από " + datePickerFrom.getDateStringOrEmptyString() + " μέχρι " + datePickerTo.getDateStringOrEmptyString());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex, "Error", JOptionPane.ERROR_MESSAGE);
                System.out.println(ex);
            }
        });
        //Προσθήκη στο panel του frame
        panel.add(button);

        frame.getContentPane().add(panel, BorderLayout.CENTER);
        frame.setSize(410, 200);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_jButtonDataDeletionRangeDateActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if (datePickerFrom.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "παρακαλώ δηλώστε ημερομηνία από...", this.getTitle(), JOptionPane.INFORMATION_MESSAGE);
        } else if (datePickerTo.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "παρακαλώ δηλώστε ημερομηνία εώς...", this.getTitle(), JOptionPane.INFORMATION_MESSAGE);
        } else {
            LocalDate datePFrom = datePickerFrom.getDate();
            LocalDate datePTo = datePickerTo.getDate();

            //εισαγωγή στοιχείου του jcalendar για σύγκριση ημερομηνιών
            long days = ChronoUnit.DAYS.between(datePFrom, datePTo);

            String parseResponseString = HTTPRequestSpecificDate(datePFrom, datePTo);

            GsonBuilder builder = new GsonBuilder();
            builder.setPrettyPrinting();
            Gson gson = builder.create();

            gson.fromJson(parseResponseString, JsonArray.class);

            //έλεγχος λίστας, εαν είναι Null τότε δεν υπάρχει παιχνίδι για τις διαθέσιμες ημερομηνίες διαφορετικά εκτελείται κανονικά
            if(days>=31){
                JOptionPane.showMessageDialog(null, "Παρακαλώ όχι πάνω από 31 ημέρες, μικρύνετε το εύρος ημερομηνιών","ΠΡΟΣΟΧΗ!!",JOptionPane.INFORMATION_MESSAGE);
            }else{
                if (Objects.isNull(parseResponseString)) {
                    JOptionPane.showMessageDialog(null, "Δεν υπάρχει διαθέσιμο παιχνίδι. Ελέγξτε τις ημερομηνίες", this.getTitle(), JOptionPane.WARNING_MESSAGE);
                } else {
                    //substring ώστε να αφαιρέσω τις αγκύλες της πρώτης και τελευαίας αγκύλης του String
                    parseResponseString = parseResponseString.substring(1, parseResponseString.length() - 1);

                    //μετατροπή από string  σε array
                    String[] elements = parseResponseString.split(",");

                    //**δημιουργία παραθύρου popup επιλογής διαθέσιμων παιχνιδιών**//
                    //δημιουργία panel και frame
                    JFrame frame = new JFrame("Επιλογή παιχνιδιού");
                    JPanel panel = new JPanel();
                    panel.setLayout(new FlowLayout());
                    //δημιουργία label, button και combobox
                    JLabel label = new JLabel("Παρακαλώ επιλέξτε παιχνίτι από τη λίστα: ");
                    JButton button = new JButton();
                    JComboBox combo = new JComboBox(elements);
                    button.setText("Επιλογή");
                    //εισαγωγή στοιχείων στο panel
                    panel.add(label);
                    panel.add(combo);
                    panel.add(button);
                    //εισαγωγη panel στο frame και ρυθμίσεις του frame
                    frame.add(panel);
                    frame.setSize(300, 300);
                    frame.setLocationRelativeTo(null);
                    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    frame.setAlwaysOnTop(true); //always on top
                    frame.setVisible(true);

                    //JButton action listener
                    //απενεργοποιεί το popup και στέλνει την επιλογή του combobox στο text game id
                    button.addActionListener(e -> {
                        getData(combo.getSelectedItem().toString());
                        frame.setAlwaysOnTop(false);
                        frame.setVisible(false);
                    });
                }
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameDiaxeirisiDedomenwnJoker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameDiaxeirisiDedomenwnJoker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameDiaxeirisiDedomenwnJoker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameDiaxeirisiDedomenwnJoker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameDiaxeirisiDedomenwnJoker().setVisible(true);
            }
        });

    }

    //Δημιουργία μεθόδου HTTP request συγκεκριμένης ημερομηνίας 
    private String HTTPRequestSpecificDate(LocalDate datePickerFrom, LocalDate datePickerTo) {
        //Endeiktiko paradeigma EAP όπως αναφέρεται από την δοκιμαστική οδηγία.
        String urlToCall = "https://api.opap.gr/draws/v3.0/5104/draw-date/" + datePickerFrom + "/" + datePickerTo + "/draw-id";
        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder().url(urlToCall).build();

        try (Response response = client.newCall(request).execute()) {
            if (response.isSuccessful() && response.body() != null) {
                String responseString = response.body().string();
                return responseString;

            }
        } catch (IOException e) {
            System.out.println(e);
            return null;
        }
        return null;
    }

    //Δημιουργία μεθόδου HTTP request συγκεκριμένου παιχνιδιού βάση draw-id
    private String HTTPRequestSpecificGameDrawId(String drawId) {
        String urlToCall = "https://api.opap.gr/draws/v3.0/5104/" + drawId;
        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder().url(urlToCall).build();

        try (Response response = client.newCall(request).execute()) {
            if (response.isSuccessful() && response.body() != null) {
                String responseString = response.body().string();
                return responseString;
            }
        } catch (IOException e) {
            System.out.println(e);
            return null;
        }
        return null;
    }

    private void getData(String drawId) {
        String parseResponseString = HTTPRequestSpecificGameDrawId(drawId);
        //Έλεγχος αν υπάρχουν δεδομένα για τον αριθμό κλήρωσης που έδωσε ο χρήστης
        if (Objects.isNull(parseResponseString)) {
            JOptionPane.showMessageDialog(null, "Δεν υπάρχει κλήρωση με αυτόν τον αριθμό", this.getTitle(), JOptionPane.WARNING_MESSAGE);
            return;
        }

        //**Εκκίνηση Gson Parsing**//
        //http://tutorials.jenkov.com/java-json/gson.html
        //αρχικοίηση αντικειμένων Json
        GsonBuilder builder = new GsonBuilder();
        builder.setPrettyPrinting();
        Gson gson = builder.create();

        //δημιουργία αντικειμένου με χρήση του HTTP request parseResponseString που πήρα μορφοποίησα από τη μέθοδο HTTPRequestSpecificGameDrawId() χρησιμοποιώντας prety printing
        //βάση οδηγιών GsonTester του ΕΑΠ θα γίνει δημιουργία αντικειμένου JSOn ώστε να μπορέσω να κάνω list parsing/itteraing μέσω βιλβιοθηκών της μεθόδου
        JsonObject jsonObj = gson.fromJson(parseResponseString, JsonObject.class);        

        //Aπό το αντικείμενο της κλάσης θα πάρω το αντικείμενο  object WinningNumbers object ώστε να χρησιμοποιήσω την λίστα αυτού
        JsonObject winningNumbersObject = jsonObj.getAsJsonObject("winningNumbers");  //winningNumber Object        
        JsonArray winningNumbersArray = winningNumbersObject.get("list").getAsJsonArray();//επιλογή λίστας winningNumberList from winningNumbersObject       
        JsonArray jokerNumberArray = winningNumbersObject.get("bonus").getAsJsonArray();//επιλογή λίστας winningNumberList from winningNumbersObject        
        //Aπό το αντικείμενο της κλάσης θα πάρω το αντικείμενο  array priZeCategories ώστε να χρησιμοποιήσω την λίστα αυτού
        JsonArray prizeCategoriesArray = jsonObj.get("prizeCategories").getAsJsonArray();        

        //Μετατροπή Unix timestamp σε date
        long unixSeconds = (long) jsonObj.get("drawTime").getAsLong();
        Date date = new java.util.Date(unixSeconds);
        SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd/MM/yyyy");
        sdf.setTimeZone(java.util.TimeZone.getTimeZone("GMT+2"));
        String drawDate = sdf.format(date);
        lblDrawDate.setText(drawDate);        

        // Δημιουργία Table Model πινάκων
        DefaultTableModel dTable1 = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel dTable2 = (DefaultTableModel) jTable2.getModel();

        //Δημιουργία λίστας και ταξινόμηση 
        Integer[] jTableListItems = new Integer[5];

        dTable1.getDataVector().removeAllElements();//διαγραφή των δεδομένων των λιστών του πίνακα jTable ώστε να μην αυξάνεται αλλά να μηδενίζει σε κάθε νέο παιχνίδι
        dTable1.fireTableDataChanged();//επιβεβαίωση διαγραφής δεδομένων

        for (int i = 0; i < 5; i++) {
            jTableListItems[i] = winningNumbersArray.get(i).getAsInt();
        }
        Arrays.sort(jTableListItems);

        //array copy
        Integer[] jTableListItems2 = new Integer[6];
        for (int i = 0; i < jTableListItems.length; i++) {
            jTableListItems2[i] = jTableListItems[i];
        }
        jTableListItems2[5] = jokerNumberArray.get(0).getAsInt();
        dTable1.addRow(jTableListItems2);

        String[] jTableListPrizeCategoryItems = new String[3];

        dTable2.getDataVector().removeAllElements();        //διαγραφή των δεδομένων των λιστών του πίνακα jTable ώστε να μην αυξάνεται αλλά να μηδενίζει σε κάθε νέο παιχνίδι
        dTable2.fireTableDataChanged();//επιβεβαίωση διαγραφής δεδομένων


        int i = 0;
        for (JsonElement element : prizeCategoriesArray) {           
            jTableListPrizeCategoryItems[0] = getCategory(element.getAsJsonObject().get("id").getAsInt());
            jTableListPrizeCategoryItems[1] = NumberFormat.getNumberInstance(Locale.getDefault()).format(element.getAsJsonObject().get("winners").getAsInt());
            jTableListPrizeCategoryItems[2] = String.format(Locale.getDefault(), "%,.2f", element.getAsJsonObject().get("divident").getAsDouble());

            //Αποθήκευση διανεμόμενων κερδών και ποσών jackpot σε πίνακες
            //ωστε να μπορούν να αποθηκευτούν στην βάση, σε περίπτωση που το επιλέξει ο χρήστης
            distributed[i] = element.getAsJsonObject().get("distributed").getAsDouble();
            jackpot[i] = element.getAsJsonObject().get("jackpot").getAsDouble();
            i++;

            dTable2.addRow(jTableListPrizeCategoryItems);
        }
        lblDrawId.setText(drawId);
    }

    //Μέθοδος για επιστροφή της κατηγορίας κερδών
    private String getCategory(int id) {
        switch (id) {
            case 1:
                return "5+1";
            case 2:
                return "5";
            case 3:
                return "4+1";
            case 4:
                return "4";
            case 5:
                return "3+1";
            case 6:
                return "3";
            case 7:
                return "2+1";
            case 8:
                return "1+1";
            default:
                return "";
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private com.github.lgooddatepicker.components.CalendarPanel calendarPanel1;
    private com.github.lgooddatepicker.components.DatePicker datePickerFrom;
    private com.github.lgooddatepicker.components.DatePicker datePickerTo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButtonDataDeletionButtonID;
    private javax.swing.JButton jButtonDataDeletionRangeDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextGameId;
    private javax.swing.JLabel lblDrawDate;
    private javax.swing.JLabel lblDrawId;
    // End of variables declaration//GEN-END:variables
}
